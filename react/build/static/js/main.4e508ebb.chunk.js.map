{"version":3,"sources":["logo.svg","useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","App","React","useState","played","setPlayed","bandwidth","setBandwidth","errors","addError","length","fetch","catch","err","concat","className","src","logo","alt","style","padding","backgroundColor","border","color","borderRadius","onClick","context","window","AudioContext","webkitAudioContext","gainNode","createGain","o","createOscillator","gain","value","connect","destination","type","start","location","reload","Numeral","format","map","error","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e508ebb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","import React from 'react';\nimport logo from './logo.svg';\nimport Numeral from 'numeral';\nimport useInterval from './useInterval';\nimport './App.css';\n\nfunction App() {\n  const [played, setPlayed] = React.useState([false, false]);\n  const [bandwidth, setBandwidth] = React.useState(0);\n  const [errors, addError] = React.useState([]);\n\n  let delay;\n\n  if (errors.length > 0) {\n    delay = null;\n  } else if (played[0] && !played[1]) {\n    delay = null;\n  } else {\n    delay = 1500;\n  }\n\n  useInterval(() => {\n    setBandwidth(bandwidth => bandwidth += 3);\n  }, delay);\n\n  React.useEffect(() => {\n    fetch('/stream').catch(err => addError(errors.concat([err])));\n  }, [errors]);\n\n  function play() {\n    setPlayed([true, true]);\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    const context = new AudioContext();\n    const gainNode = context.createGain();\n    const o = context.createOscillator();\n    gainNode.gain.value = .001;\n    o.connect(gainNode);\n    gainNode.connect(context.destination);\n    o.type = \"sine\";\n    // o.connect(context.destination);\n    o.start();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {!played[0] && <button style={{\n          padding: '10px 25px',\n          backgroundColor: 'white',\n          border: '1px solid rgba(0,0,0,.3)',\n          color: 'black',\n          borderRadius: '4px'\n        }} onClick={play}>Keep running in background for ~1 hour</button>}\n        <p onClick={() => window.location.reload()}>streaming: {Numeral(bandwidth).format('0.0 b')}</p>\n        {errors.map(error => <code>{error.toString()}</code>)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}